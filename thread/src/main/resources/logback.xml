<?xml version="1.0" encoding="UTF-8"?>

<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration debug="false">
	<!-- 设置上下文名称 -->
	<contextName>EX2018</contextName>

	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
	<property name="log.path.root" value="D:/EX2018-LOG/" />
	<property name="log.charset" value="UTF-8" />
	<property name="total.size.cap" value="30GB" /><!-- 控制所有归档日志文件的总大小 -->

	<!-- Log4j: [S][%d{yyyyMMdd HH:mm:ss}][%-5p][%C:%L] - %m%n -->
	<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
	<property name="log.pattern.file" value="%d{yyyy-MM-dd HH:mm:ss.SSS}%-5level ${PID:- } --- [%thread] %logger : %m%n%xException" />
	<property name="log.pattern.error.file" value="%d{yyyy-MM-dd HH:mm:ss.SSS}%-5level ${PID:- } --- [%thread] %logger %method : %m%n%caller{1..3}%xException" />
	<!-- 彩色日志格式 -->
	<property name="log.pattern.console" value="%clr(%d{yyyy-MM-dd HH:mm:ss}) %clr(%-5level) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%-10.10thread]){faint} %clr(%-40.40logger{39}){blue} %clr(:){faint} %m%n%xException" />

	<!-- 控制台输出 -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
	<!-- Console 输出设置 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.console}</pattern>
		</encoder>
	</appender>
	<!-- 请求日志过滤-->
	<appender name="REQUEST_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator> <!-- 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator  || message.startsWith("Returning handler method")-->
				<expression>
					<![CDATA[
					return (!message.contains(".") && message.startsWith("Looking up handler method")) ;
					]]>
				</expression>
			</evaluator>
			<OnMatch>ACCEPT</OnMatch>
			<OnMismatch>DENY</OnMismatch>
		</filter>
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.console}</pattern>
		</encoder>
	</appender>

	<appender name="AOP_INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path.root}ex.aop.log</file>
		<append>true</append>
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.file}</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"><!-- 滚动策略 大小 策略 -->
			<fileNamePattern>${log.path.root}/%d{yyyy-MM-dd}ex.aop-%i.log</fileNamePattern>
			<maxFileSize>10MB</maxFileSize><!-- 单个日志大小 -->
			<maxHistory>30</maxHistory><!--保留的归档文件的最大数量 -->
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
	</appender>
	<!-- info 日志文件 -->
	<appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path.root}ex.info.log</file>
		<append>true</append>
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.file}</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"><!-- 滚动策略 大小 策略 -->
			<fileNamePattern>${log.path.root}/%d{yyyy-MM-dd}exinfo-%i.log</fileNamePattern>
			<maxFileSize>10MB</maxFileSize><!-- 单个日志大小 -->
			<maxHistory>30</maxHistory><!--保留的归档文件的最大数量 -->
            <totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
	</appender>
	<!-- warn 日志文件 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path.root}ex.error.log</file>
		<append>true</append>
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.error.file}</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"><!-- 滚动策略 大小 策略 -->
			<fileNamePattern>${log.path.root}/%d{yyyy-MM-dd}exerror-%i.log</fileNamePattern>
			<maxFileSize>10MB</maxFileSize><!-- 单个日志大小 -->
			<maxHistory>30</maxHistory><!--保留的归档文件的最大数量 -->
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
	</appender>

	<appender name="DB_INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path.root}ex.hikari.log</file>
		<append>true</append>
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.file}</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"><!-- 滚动策略 大小 策略 -->
			<fileNamePattern>${log.path.root}/%d{yyyy-MM-dd}ex.hikari-%i.log</fileNamePattern>
			<maxFileSize>10MB</maxFileSize><!-- 单个日志大小 -->
			<maxHistory>30</maxHistory><!--保留的归档文件的最大数量 -->
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
	</appender>

	<appender name="REQUEST_FLOW_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.path.root}ex.request.flow.log</file>
		<append>true</append>
		<encoder charset="${log.charset}">
			<pattern>${log.pattern.file}</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"><!-- 滚动策略 大小 策略 -->
			<fileNamePattern>${log.path.root}/%d{yyyy-MM-dd}ex.request.flow-%i.log</fileNamePattern>
			<maxFileSize>10MB</maxFileSize><!-- 单个日志大小 -->
			<maxHistory>30</maxHistory><!--保留的归档文件的最大数量 -->
			<totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
	</appender>

	<!-- ERROR邮件发送 -->
	<appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">
		<smtpHost>smtp.126.com</smtpHost>
		<smtpPort>25</smtpPort>
		<username>mjm13@126.com</username>
		<password>sbwy1234</password>
		<asynchronousSending>true</asynchronousSending>
		<SSL>true</SSL>
		<!--<to>mjm13@126.com</to>-->
		<to>mjm@bangmuju.com</to>
		<!--<to>xuzhenguo@oureman.com</to>-->
		<from>mjm13@126.com</from>
		<subject>%d{yyyy-MM-dd}:EX2018错误日志</subject>
		　　　　 <!-- html格式-->
		<layout>
			<Pattern>${log.pattern.error.file}}</Pattern>
		</layout>
		<cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker">
			<!-- 缓冲的日志数量 -->
			<bufferSize>5</bufferSize>
		</cyclicBufferTracker>
		　　　　 <!-- 这里采用等级过滤器 指定等级相符才发送 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!--系统警告日志打印到单独日志文件-->
	<logger name="com.bmw.frame" level="ERROR" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="ERROR_FILE" />
	</logger>

	<!--系统警告日志打印到单独日志文件-->
	<logger name="com.bmw.frame" level="INFO" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="INFO_FILE" />
	</logger>

	<!-- 1. 输出SQL 到控制台和文件,生产环境视情况打开-->
	<logger name="org.hibernate.SQL" level="DEBUG" additivity="false" >
<!--		<appender-ref ref="CONSOLE" />-->
		<appender-ref ref="INFO_FILE" />
	</logger>

	<!-- 2. 输出SQL 的参数到控制台和文件,生产环境视情况打开-->
	<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" additivity="false"  >
<!--		<appender-ref ref="CONSOLE" />-->
		<appender-ref ref="INFO_FILE" />
	</logger>

	<logger name="com.bmw.frame.config.aop.SystemAop" level="INFO" additivity="false">
		<appender-ref ref="AOP_INFO_FILE" />
		<appender-ref ref="CONSOLE" />
	</logger>

	<!--
	3 输出请求路径到文件
	org.springframework.web.servlet.DispatcherServlet 没有请求执行的方法所以使用当前日志
	-->
	<logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="DEBUG" additivity="false"  >
		<appender-ref ref="REQUEST_CONSOLE" />
		<appender-ref ref="INFO_FILE" />
	</logger>
	<!--
	4 输出请求耗时流水到文件,生产环境视情况打开-->
	-->
	<logger name="org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext" level="TRACE" additivity="false"  >
		<appender-ref ref="REQUEST_FLOW_FILE" />
	</logger>

	<logger name="org.apache.tomcat.util.net.NioEndpoint" level="ERROR" additivity="false"  >
		<appender-ref ref="ERROR_FILE" />
	</logger>

	<logger name="io.swagger.models.parameters.AbstractSerializableParameter" level="ERROR" additivity="false" >
		<appender-ref ref="ERROR_FILE" />
	</logger>

	<!-- 日志输出级别 -->
	<!--<root level="TRACE">-->
	<root level="INFO">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="INFO_FILE" />
		<!--<appender-ref ref="EMAIL" />-->
	</root>

	<logger name="com.zaxxer.hikari" level="debug" additivity="false">
		<appender-ref ref="DB_INFO_FILE" />
	</logger>
	<logger name="org.springframework.jdbc.core" level="debug" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="INFO_FILE" />
	</logger>
	<logger name="org.springframework.jdbc.core.StatementCreatorUtils" level="trace" additivity="false">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="INFO_FILE" />
	</logger>

</configuration>